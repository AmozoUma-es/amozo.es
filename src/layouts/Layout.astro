---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Curriculum Vitae Personal" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <title>{title}</title>
  </head>
  <body class="font-sans antialiased bg-white dark:bg-gray-900 text-gray-900 dark:text-white">
    <slot />
    <script>
      // Theme management
      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };

      const isDark = getThemePreference() === 'dark';
      document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

      if (typeof localStorage !== 'undefined') {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains('dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
      }

      // Theme toggle
      window.toggleTheme = () => {
        document.documentElement.classList.toggle('dark');
      };

      // Modal functionality
      window.openModal = (images, title) => {
        const modal = document.getElementById('modal');
        const modalTitle = document.getElementById('modal-title');
        const modalContent = document.getElementById('modal-content');
        
        modalTitle.textContent = title;
        modalContent.innerHTML = '';
        
        images.forEach((src, index) => {
          const container = document.createElement('div');
          container.className = 'mb-6 animate-fade-in';
          container.style.animationDelay = `${index * 0.1}s`;
          
          if (src.includes('.mp4') || src.includes('.webm')) {
            const video = document.createElement('video');
            video.src = src;
            video.controls = true;
            video.className = 'w-full rounded-xl shadow-lg hover:shadow-2xl transition-shadow duration-300';
            container.appendChild(video);
          } else {
            const img = document.createElement('img');
            img.src = src;
            img.className = 'w-full rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300';
            container.appendChild(img);
          }
          
          modalContent.appendChild(container);
        });
        
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        document.body.style.overflow = 'hidden';
      };

      window.closeModal = () => {
        const modal = document.getElementById('modal');
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = 'auto';
      };

      // Close modal on outside click
      document.addEventListener('click', (e) => {
        const modal = document.getElementById('modal');
        if (e.target === modal) {
          closeModal();
        }
      });

      // Intersection Observer for scroll animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
          }
        });
      }, observerOptions);

      // Initialize observer when DOM is loaded
      document.addEventListener('DOMContentLoaded', () => {
        const animatableElements = document.querySelectorAll('.animate-on-scroll');
        animatableElements.forEach(el => observer.observe(el));
      });
    </script>
  </body>
</html>